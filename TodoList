import tkinter as tk
from tkinter import messagebox
import json
import os
FILE_PATH = 'todo_list.json'
def load_tasks():
    if os.path.exists(FILE_PATH):
        with open(FILE_PATH, 'r') as file:
            return json.load(file)
    return []
def save_tasks(tasks):
    with open(FILE_PATH, 'w') as file:
        json.dump(tasks, file)
def refresh_task_listbox():
    task_listbox.delete(0, tk.END)
    for task in tasks:
        task_listbox.insert(tk.END, f"{task['task']} - {'Done' if task['done'] else 'Not Done'}")
def add_task():
    task = task_entry.get()
    if task:
        tasks.append({"task": task, "done": False})
        save_tasks(tasks)
        refresh_task_listbox()
        task_entry.delete(0, tk.END)
    else:
        messagebox.showwarning("Warning", "Task cannot be empty")
def update_task():
    try:
        index = task_listbox.curselection()[0]
        task = task_entry.get()
        if task:
            tasks[index]["task"] = task
            save_tasks(tasks)
            refresh_task_listbox()
            task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Task cannot be empty")
    except IndexError:
        messagebox.showwarning("Warning", "Select a task to update")
def delete_task():
    try:
        index = task_listbox.curselection()[0]
        tasks.pop(index)
        save_tasks(tasks)
        refresh_task_listbox()
    except IndexError:
        messagebox.showwarning("Warning", "Select a task to delete")
def mark_task_done():
    try:
        index = task_listbox.curselection()[0]
        tasks[index]["done"] = True
        save_tasks(tasks)
        refresh_task_listbox()
    except IndexError:
        messagebox.showwarning("Warning", "Select a task to mark as done")
tasks = load_tasks()
root = tk.Tk()
root.title("To-Do List")
task_frame = tk.Frame(root)
task_frame.pack(pady=10)
task_listbox = tk.Listbox(task_frame, width=50, height=10)
task_listbox.pack(side=tk.LEFT, fill=tk.BOTH)
scrollbar = tk.Scrollbar(task_frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.BOTH)
task_listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=task_listbox.yview)
entry_frame = tk.Frame(root)
entry_frame.pack(pady=10)
task_entry = tk.Entry(entry_frame, width=40)
task_entry.pack(side=tk.LEFT, padx=10)
add_button = tk.Button(entry_frame, text="Add Task", command=add_task)
add_button.pack(side=tk.LEFT)
update_button = tk.Button(entry_frame, text="Update Task", command=update_task)
update_button.pack(side=tk.LEFT)
delete_button = tk.Button(entry_frame, text="Delete Task", command=delete_task)
delete_button.pack(side=tk.LEFT)
done_button = tk.Button(root, text="Mark as Done", command=mark_task_done)
done_button.pack(pady=10)
refresh_task_listbox()
root.mainloop()
